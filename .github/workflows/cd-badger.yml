name: cd-badger
on:
  workflow_dispatch:
    inputs:
      releasetag:
        description: 'releasetag'
        required: true
        type: string
jobs:
  badger-build-amd64:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          ref: '${{ github.event.inputs.releasetag }}'
      - name: Get Go Version
        run: |
          #!/bin/bash
          GOVERSION=$({ [ -f .go-version ] && cat .go-version; })
          echo "GOVERSION=$GOVERSION" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Set Badger Release Version
        run: |
          #!/bin/bash
          GIT_TAG_NAME='${{ github.event.inputs.releasetag }}'
          if [[ "$GIT_TAG_NAME" == "v"* ]]; 
          then
            echo "this is a release tag"
          else
            echo "this is NOT a release tag"
            exit 1
          fi
          BADGER_RELEASE_VERSION='${{ github.event.inputs.releasetag }}'
          echo "making a new release for "$BADGER_RELEASE_VERSION
          echo "BADGER_RELEASE_VERSION=$BADGER_RELEASE_VERSION" >> $GITHUB_ENV
      - name: Fetch dependencies
        run: sudo apt-get -y install build-essential
      - name: Build badger linux/amd64
        run: make badger
      - name: Generate SHA for Linux Build
        run: cd badger && sha256sum badger-linux-amd64 | cut -c-64 > badger-checksum-linux-amd64.sha256
      - name: Tar Archive for Linux Build
        run: cd badger && tar -zcvf badger-linux-amd64.tar.gz badger-linux-amd64
      - name: Upload Badger Binary Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          path: |
            badger/badger-checksum-linux-amd64.sha256
            badger/badger-linux-amd64.tar.gz
  badger-build-arm64:
    runs-on: [self-hosted, ARM64]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: '${{ github.event.inputs.releasetag }}'
      - name: Get Go Version
        run: |
          #!/bin/bash
          GOVERSION=$({ [ -f .go-version ] && cat .go-version; })
          echo "GOVERSION=$GOVERSION" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Set Badger Release Version
        run: |
          #!/bin/bash
          GIT_TAG_NAME='${{ github.event.inputs.releasetag }}'
          if [[ "$GIT_TAG_NAME" == "v"* ]]; 
          then
            echo "this is a release tag"
          else
            echo "this is NOT a release tag"
            exit 1
          fi
          BADGER_RELEASE_VERSION='${{ github.event.inputs.releasetag }}'
          echo "making a new release for "$BADGER_RELEASE_VERSION
          echo "BADGER_RELEASE_VERSION=$BADGER_RELEASE_VERSION" >> $GITHUB_ENV
      - name: Fetch dependencies
        run: sudo apt-get -y install build-essential
      - name: Build badger linux/arm64
        run: make badger
      - name: Generate SHA for Linux Build
        run: cd badger && sha256sum badger-linux-arm64 | cut -c-64 > badger-checksum-linux-arm64.sha256
      - name: Tar Archive for Linux Build
        run: cd badger && tar -zcvf badger-linux-arm64.tar.gz badger-linux-arm64
      - name: Upload Badger Binary Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          path: |
            badger/badger-checksum-linux-arm64.sha256
            badger/badger-linux-arm64.tar.gz
